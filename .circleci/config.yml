version: 2
jobs:
  build:
    machine: true
    steps:
      - checkout
      - run: mkdir -p workspace
      - run: echo "export IMAGE_TAG=v2" >> workspace/new-env-vars
      - persist_to_workspace:
          root: workspace
          paths:
              - new-env-vars
      - run: cat workspace/new-env-vars >> $BASH_ENV
      - run: echo $IMAGE_TAG
      - run:
          name: Get Pip
          command: |
            curl -O https://bootstrap.pypa.io/get-pip.py && python get-pip.py
      - run:
          name: Pip install AWS CLI
          command: |
            pip install awscli
      - run:
          name: Setup Environment Variables
          command: |
            echo "export AWS_DEFAULT_REGION=us-west-2" >> $BASH_ENV
            echo "export IMAGE_REPO_NAME=ghc" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=502627520384" >> $BASH_ENV
            echo "export IMAGE_TAG=$CIRCLE_BUILD_NUM" >> $BASH_ENV
      - run:
          name: Build image and push to ECR
          command: |
            #$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            #docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
            #docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            #docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            echo $IMAGE_TAG
          environment:
            AWS_DEFAULT_REGION: "us-west-2"
            AWS_ACCOUNT_ID: "502627520384"
            IMAGE_REPO_NAME: "ghc"
            IMAGE_TAG: "$CIRCLE_BUILD_NUM"
  test:
    docker:
      - image: amazonlinux
    steps:
      - run: yum install -y tar gzip
      - attach_workspace:
          at: /tmp/cci-test/workspace
      - checkout
      - run: cat workspace/new-env-vars >> $BASH_ENV
      - run:
          name: Test var
          command: |
            env
      - run:
          name: Get Pip
          command: |
            curl -O https://bootstrap.pypa.io/get-pip.py && python get-pip.py
      - run:
          name: Pip install
          command: |
            pip install awscli
      - run:
          name: Validate CFN templates
          command: |
            for i in cfn/*.yml; do aws cloudformation validate-template --template-body file://$i --region us-west-2 ; done
  deploy:
    docker:
      - image: amazonlinux
    steps:
      - checkout
      - run:
          name: Test file
          command: |
            cat version.txt
      - run:
          name: Get Pip
          command: |
            curl -O https://bootstrap.pypa.io/get-pip.py && python get-pip.py
      - run:
          name: Pip install
          command: |
            pip install awscli
      - run:
          name: Setup Environment Variables
          command: |
            echo "export AWS_DEFAULT_REGION=us-west-2" >> $BASH_ENV
            echo "export IMAGE_REPO_NAME=ghc" >> $BASH_ENV
            echo "export AWS_ACCOUNT_ID=502627520384" >> $BASH_ENV
            echo "export IMAGE_TAG=$CIRCLE_BUILD_NUM" >> $BASH_ENV
      - run:
          name: Test file
          command: |
            cat version.txt
      - run:
          name: Deploy VPC Resources w/ PrivateLink
          command: |
            if ! aws cloudformation describe-stacks --stack-name ghc-vpc-privatelink --region us-west-2 ;  then
              aws cloudformation create-stack --stack-name ghc-vpc-privatelink --template-file cfn/network-stack.yml --capabilities CAPABILITY_NAMED_IAM --region us-west-2
            else
              echo -e "Stack exists..."
            fi
          no_output_timeout: 20m
      - run:
          name: Deploy Application
          command: |
            aws cloudformation create-stack --stack-name ghc-ecs-fargate-$CIRCLE_PROJECT_USERNAME --template-body file://cfn/service-stack.yml --region us-west-2 --parameters ParameterKey=ImageUrl,ParameterValue=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
          no_output_timeout: 20m
workflows:
  version: 2
  build_approve_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - approve:
          type: approval
          requires:
            - test
      - deploy:
          requires:
            - approve
